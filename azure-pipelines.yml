
name: $(VersionNumberMajor).$(VersionNumberMinor)$(Rev:.rrrr)

resources:
- repo: self
  fetchDepth: 15

variables:
- name: VersionNumberMajor 
  value: '0'
- name: VersionNumberMinor 
  value: '1'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build    
    variables:
      "Build.Solution": 'src\**\*.sln'
      "Build.Configuration": 'Release'
      "Build.Platform": 'Any CPU'
      "Nuget.Feed": 'dct-pkg'  
      "Nuget.Version": '5.3.0'
      "DotnetCore.Version": '2.2.x'

    pool:
      name: DCT
      demands:
      - IsBuildServer
      
    steps:
#********************************************************************************
# Install and setup tools needed
#********************************************************************************   

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk : $(DotnetCore.Version)'
      inputs:
        packageType: sdk
        version: $(DotnetCore.Version)
    
    - task: VisualStudioTestPlatformInstaller@1
      displayName: 'Visual Studio Test Platform Installer'
      inputs:
        versionSelector: latestStable
    
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet : $(Nuget.Version)'
      inputs:
        versionSpec: '> $(Nuget.Version)'
        checkLatest: true

    - task: UseGitVersion@5
      name: use Git Version to generate build number
      inputs:
        versionSpec: '5.x'

    - powershell: '(gci env:*).GetEnumerator() | Where-Object {$_.Name -Like "*BUILD*" -or $_.Name -Like "*GITVERSION*" -or $_.Name -Like "*CI_Version*" } | Sort-Object Name | ForEach {Write-Host "Name: " + $_.Name + " | Value : " + $_.Value} '
      displayName: 'Display Git Version Variables'

    # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
            dotnet tool update -g dotnet-reportgenerator-globaltool --version 4.3.6
      displayName: Install dotnet-reportgenerator-globaltool
      continueOnError: true  
      enabled: false
    
#********************************************************************************
# Restore & Build Projects/Solutiosn
#********************************************************************************   
    - task: DotNetCoreCLI@2
      enabled: true
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**\*.csproj'
        vstsFeed: '$(Nuget.Feed)'
    #    includeNuGetOrg: false
    #    noCache: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      enabled: false
      inputs:
        command: build
        projects: '**\*.csproj'
        vstsFeed: '$(Nuget.Feed)'
    #    includeNuGetOrg: false
    #    noCache: true
    
    - task: MSBuild@1
      enabled: true
      displayName: 'Build solution'
      inputs:
        solution: '$(Build.Solution)'
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'
        msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
        clean: true
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true  

#********************************************************************************
# Copy Files into Aftifact Folder before test.
#********************************************************************************   
    
    - task: CopyFiles@2
      displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\src'
        Contents: |
         **\*$(Build.Configuration)*\*Interface.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
        CleanTargetFolder: true
        flattenFolders: true
    
    - task: CopyFiles@2
      displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\src'
        Contents: |
         **\*$(Build.Configuration)*\*.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
        CleanTargetFolder: true
        flattenFolders: true
            
    - task: CopyFiles@2
      displayName: 'Copy Database Files - Artifact Databases Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\*.Database\**\*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)\Databases'
        CleanTargetFolder: true
        flattenFolders: true
        
#********************************************************************************
# Count Artifact Files to decide what to Publish
#********************************************************************************    
    - task: PowerShell@2
      displayName: 'Check What to Publish'
      continueOnError: true  
      inputs:
        targetType: 'inline'
        script: |
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_NugetPackages]$(Test-Path '$(build.artifactstagingdirectory)\Nuget' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Databases]$(Test-Path '$(build.artifactstagingdirectory)\Databases' -PathType Any)";
      enabled: true

#********************************************************************************
# Run Unit Tests
#********************************************************************************
    - task: DotNetCoreCLI@2
      displayName: 'Run xUnit Test - Core Framework'
      enabled: false
      inputs:
        command: test
        projects: 'src/*Tests/*.csproj'
        arguments: '--configuration $(Build.Configuration) --collect "Code coverage"'

        
#********************************************************************************
# Generate Code Coverage Report and Publish
#********************************************************************************
# need to add Nuget PAckage 'coverlet.msbuild' to  Test Projects.
#
     ## Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
        dotnet tool update -g dotnet-reportgenerator-globaltool --version 4.3.6  
        reportgenerator -reports:$(Build.SourcesDirectory)/**/*Tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
      displayName: Create Code coverage report
      enabled: false
  
    # Publish the code coverage result (summary and web site)
    # The summary allows to view the coverage percentage in the summary tab
    # The web site allows to view which lines are covered directly in Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      enabled: false
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

#********************************************************************************
# Publish Artifacts
#********************************************************************************    
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      enabled: false
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      continueOnError: true
   
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NugetPackages'
      enabled: true
      condition: and(succeeded(), eq(variables['PublishArtifact_NugetPackages'], 'True'))
      inputs:
        ArtifactName: NugetPackages
        PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Databases'
      enabled: true
      condition: and(succeeded(), eq(variables['PublishArtifact_Databases'], 'True'))
      inputs:
        ArtifactName: Databases
        PathtoPublish: '$(build.artifactstagingdirectory)\Databases'
